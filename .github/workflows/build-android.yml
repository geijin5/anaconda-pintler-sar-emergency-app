name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        ndk-version: 25.1.8937393
        cmake-version: 3.22.1
        
    - name: Accept Android SDK licenses
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
        restore-keys: |
          ${{ runner.os }}-bun-
          
    - name: Install dependencies
      run: bun install
      
    - name: Setup Expo CLI
      run: bun add --global @expo/cli
      
    - name: Cache Expo prebuild
      uses: actions/cache@v4
      with:
        path: |
          android
          .expo
        key: ${{ runner.os }}-expo-android-${{ hashFiles('app.json', 'package.json') }}
        restore-keys: |
          ${{ runner.os }}-expo-android-
          
    - name: Set environment variables
      run: |
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools" >> $GITHUB_ENV
        

      
    - name: Clean previous builds
      run: |
        rm -rf android
        rm -rf ios
        rm -rf .expo
        rm -rf node_modules/.cache
        rm -rf ~/.expo
        rm -rf ~/.npm/_cacache
        
    - name: Create metro config for platform compatibility
      run: |
        cat > metro.config.js << 'EOF'
        const { getDefaultConfig } = require('expo/metro-config');
        const path = require('path');
        
        const config = getDefaultConfig(__dirname);
        
        // Configure platform-specific resolution
        config.resolver.platforms = ['ios', 'android', 'native', 'web'];
        
        // Handle platform-specific extensions
        config.resolver.sourceExts = [...config.resolver.sourceExts, 'web.js', 'web.ts', 'web.tsx'];
        
        // Configure resolver for better web compatibility
        config.resolver.resolverMainFields = ['react-native', 'browser', 'main'];
        
        // Add custom resolver to handle react-native-maps on web
        const originalResolveRequest = config.resolver.resolveRequest;
        config.resolver.resolveRequest = (context, moduleName, platform) => {
          // Handle react-native-maps on web platform
          if (platform === 'web' && moduleName === 'react-native-maps') {
            return {
              filePath: path.resolve(__dirname, 'web-stubs/react-native-maps.js'),
              type: 'sourceFile',
            };
          }
          
          // Use default resolver for other cases
          if (originalResolveRequest) {
            return originalResolveRequest(context, moduleName, platform);
          }
          
          return context.resolveRequest(context, moduleName, platform);
        };
        
        module.exports = config;
        EOF
        
    - name: Make scripts executable
      run: |
        chmod +x scripts/prebuild.sh
        chmod +x scripts/configure-maps.sh
        
    - name: Configure Google Maps
      run: ./scripts/configure-maps.sh
      
    - name: Prebuild Android
      run: |
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo "Running prebuild script..."
        ./scripts/prebuild.sh android
      env:
        EXPO_NO_DOTENV: 1
        CI: 1
        EXPO_NO_TELEMETRY: 1
        EXPO_NO_FLIPPER: 1
        NODE_ENV: production
        
    - name: Verify Android directory exists
      run: |
        echo "Checking for android directory..."
        ls -la
        if [ ! -d "android" ]; then
          echo "Error: android directory not found after prebuild"
          echo "Attempting manual prebuild..."
          bunx expo prebuild --platform android --clean --no-install
          if [ ! -d "android" ]; then
            echo "Manual prebuild also failed"
            exit 1
          fi
        fi
        echo "Android directory exists, proceeding with build..."
        echo "Contents of android directory:"
        ls -la android/
      
    - name: Cache Gradle
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android/.gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x android/gradlew
      
    - name: Build APK
      run: |
        cd android
        export GRADLE_OPTS="-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError"
        export JAVA_OPTS="-Xmx4g"
        ./gradlew clean
        ./gradlew assembleRelease --no-daemon --stacktrace --build-cache --parallel
      env:
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}
        CI: true
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: android/app/build/outputs/apk/release/app-release.apk
        if-no-files-found: error
        
    - name: Build AAB (for Play Store)
      run: |
        cd android
        export GRADLE_OPTS="-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError"
        export JAVA_OPTS="-Xmx4g"
        ./gradlew bundleRelease --no-daemon --stacktrace --build-cache --parallel
      env:
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}
        CI: true
        
    - name: Upload AAB
      uses: actions/upload-artifact@v4
      with:
        name: android-aab
        path: android/app/build/outputs/bundle/release/app-release.aab
        if-no-files-found: error


